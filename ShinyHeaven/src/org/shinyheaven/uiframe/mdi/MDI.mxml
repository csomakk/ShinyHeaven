<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 left="0" right="0"
		 clipAndEnableScrolling="true"
		 xmlns:parsley="http://www.spicefactory.org/parsley">
	<fx:Declarations>
		<parsley:Configure />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.flashdynamix.motion.TweensyZero;
			
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.ResizeEvent;
			
			import org.shinyheaven.instrumenthandling.SubscriptionManager;
			import org.shinyheaven.service.CommunicationModule;

        [Inject]
        public var commModule:CommunicationModule;
		[Inject]
		public var instance:MDIController;

        private var remainingDocumentsArrayCollection:ArrayCollection = new ArrayCollection();
        private var dockedDocumentsArrayCollection:ArrayCollection = new ArrayCollection();

        private var draggedDocument:DocumentHolder;

        private var marker:DragMarker;

        private var dummy:DocumentHolder;

        private var indexBeforeDrag:int;
        private var _numberOfRows:int;
        private var rowLength:int;
			
        /////////////
        // the remaining values represent the place left for undocked components.
        ///////////
        private var remainingLeft:int;
        private var remainingRight:int;
        private var remainingTop:int;
        private var remainingBottom:int;

        private var dict:Dictionary = new Dictionary();

        private const REMAINING_MINIMUM_SIZE:Number = 200;

        public static const TOP:int = 1;
        public static const BOTTOM:int = 2;
        public static const RIGHT:int = 3;
        public static const LEFT:int = 4;
        public static const UNDOCKED:int = 0;

        [Init]
        public function setUpMDI():void {
			ShinyHeaven.logger.info("MDI.setUpMDI");
			if(stage == null) {
				addEventListener(Event.ADDED_TO_STAGE, setResizeHandler);
			} else {
				setResizeHandler();	
			}
          
            marker = new DragMarker();
            arrangeUnDocked();
			
			instance.mdi = this;
			
        }
			
		private function setResizeHandler(e:Event = null):void {
			stage.addEventListener(ResizeEvent.RESIZE, MDI_resizeHandler);
		}

        private function get remainingWidth():Number {
            return remainingRight - remainingLeft;
        }

        private function get remainingHeigth():Number {
            return remainingBottom - remainingTop;
        }

        private function get remainingColumnWidth():Number {
            return remainingWidth / rowLength;
        }

        private function get remainingRowHeight():Number {
            return remainingHeigth / _numberOfRows;
        }

        public function set numberOfRows(value:int):void {
            if (value < 1) {
                value = 1;
            }
            _numberOfRows = value;
            rowLength = Math.ceil(remainingDocumentsArrayCollection.length / _numberOfRows);
            _numberOfRows = Math.ceil(remainingDocumentsArrayCollection.length / rowLength);
            rearrange();
        }

        private var _positions:Vector.<MDIPosition>;

        /** Set positions of children. The syntax (in EBNF) is the following:
         * <PRE>
         *  positions     ::= [modifier] alignment [percentage]
         *  modifier      ::= multiplier | rest
         *  multiplier    ::= number"x"
         *  rest          ::= "rest:"
         *  alignment     ::= "top" | "right" | "bottom" | "left" | "undocked"
         *  percentage    ::= number"%"
         * </PRE>
         */
        public function set positions(value:String):void {
            _positions = MDIPosition.parseList(value);
            ShinyHeaven.logger.debug("positions: {0}", _positions);
        }

        private var elementPosition:int = 0;

        public function addDocument(element:IVisualElement):DocumentHolder {
			ShinyHeaven.logger.info("MDI.addDocument");
            var d:DocumentHolder = new DocumentHolder();
            d.element = element;
            remainingDocumentsArrayCollection.addItem(d);
            addElement(d);
            d.addEventListener(MouseEvent.MOUSE_DOWN, documentMouseDown);
            dict[element] = d;
            var pos:MDIPosition = (_positions.length > elementPosition)? _positions[elementPosition] : MDIPosition.getRest(_positions);
            dockDocument(element, pos.direction);
            if (pos.direction == TOP || pos.direction == BOTTOM) d.percentHeight = pos.weight;
            if (pos.direction == LEFT || pos.direction == RIGHT) d.percentWidth = pos.weight;
			arrangeUnDocked();
            elementPosition++;
            return d;
        }
			
		public function addCloseListener(element:IVisualElement, callback:Function):void {
			ShinyHeaven.logger.info("MDI.addCloseListener");
			var d:DocumentHolder = dict[element];
			d.closeCallbackFunctions.push(callback);
		}

        public function removeDocument(element:IVisualElement):void {
			ShinyHeaven.logger.info("MDI.removeDocument");
            var d:DocumentHolder = dict[element];

            if (remainingDocumentsArrayCollection.contains(d)) {
                remainingDocumentsArrayCollection.removeItemAt(remainingDocumentsArrayCollection.getItemIndex(d));
            }
            if (dockedDocumentsArrayCollection.contains(d)) {
                dockedDocumentsArrayCollection.removeItemAt(dockedDocumentsArrayCollection.getItemIndex(d));
            }
            removeElement(d);
            dict[element] = null;
			
			for each(var f:Function in d.closeCallbackFunctions){
				f.call();
			}
			
			arrangeUnDocked();
        }

        /** adds if needed, and docks or undocks element @param direction example: MDI.LEFT */
        public function dockDocument(element:IVisualElement, direction:int = 1):DocumentHolder {
			ShinyHeaven.logger.info("MDI.dockDocument: direction={0}", direction);
            var d:DocumentHolder = dict[element];
            if (d == null) {
                d = addDocument(element);
            }
            d.dockedDirection = direction;

            if (direction > 0) {
                if (remainingDocumentsArrayCollection.contains(d)) {
                    remainingDocumentsArrayCollection.removeItemAt(remainingDocumentsArrayCollection.getItemIndex(d));
                }
                if (dockedDocumentsArrayCollection.contains(d) == false) {
                    dockedDocumentsArrayCollection.addItem(d);
                }
            } else {
                if (remainingDocumentsArrayCollection.contains(d) == false) {
                    remainingDocumentsArrayCollection.addItem(d);
                }
                if (dockedDocumentsArrayCollection.contains(d)) {
                    dockedDocumentsArrayCollection.removeItemAt(dockedDocumentsArrayCollection.getItemIndex(d));
                }
            }

			arrangeUnDocked();
            return d;
        }

        override protected function createChildren():void {
            for (var i:int = 0; i < super.numElements; i++) {
                var e:IVisualElement = removeElementAt(0);
                addDocument(e);
            }

            super.createChildren();
        }

        private function rearrange():void {
			ShinyHeaven.logger.info("MDI.rearrange");
            if (stage == null) {
                addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);
                return;
            }

            remainingLeft = 0;
            remainingRight = width;
            remainingTop = 0;
            remainingBottom = height;

            for each (var d:DocumentHolder in dockedDocumentsArrayCollection) {
                if (containsElement(d) == false) {
                    addElement(d);
                }
				
				measure();
				
                var dx:int;
                var dy:int;

                if (d.width < 0) {
                    d.width = 100;
                }
                if (d.height < 0) {
                    d.height = 100;
                }

                switch (d.dockedDirection) {
                    case LEFT:
                        dx = remainingLeft;
                        dy = remainingTop;
                        d.height = remainingHeigth;
                        remainingLeft += d.width;
                        break;
                    case RIGHT:
                        dx = remainingRight - d.width;
                        dy = remainingTop;
                        d.height = remainingHeigth
                        remainingRight = dx;
                        break;
                    case TOP:
                        dx = remainingLeft;
                        dy = remainingTop;
                        d.width = remainingWidth;
                        remainingTop += d.height;
                        break;
                    case BOTTOM:
                        dx = remainingLeft;
                        dy = remainingBottom - d.height;
                        d.width = remainingWidth;
                        remainingBottom = dy;		
                        break;
                    default:
                        ;
                }

                while (remainingWidth < REMAINING_MINIMUM_SIZE && d.width > REMAINING_MINIMUM_SIZE) {
                    d.width -= REMAINING_MINIMUM_SIZE;
                    if (d.dockedDirection == LEFT) {
                        remainingLeft -= REMAINING_MINIMUM_SIZE;
                    }
                    if (d.dockedDirection == RIGHT) {
						dx += REMAINING_MINIMUM_SIZE;
						remainingRight = dx;
                    }
                }

                while (remainingHeigth < REMAINING_MINIMUM_SIZE && d.height > REMAINING_MINIMUM_SIZE) {
                    d.height -= REMAINING_MINIMUM_SIZE;
                    if (d.dockedDirection == TOP) {
                        remainingTop -= REMAINING_MINIMUM_SIZE;
                    }
                    if (d.dockedDirection == BOTTOM) {
                        dy += REMAINING_MINIMUM_SIZE;
						remainingBottom = dy;
						
                    }
                }

                TweensyZero.to(d, {x: dx, y: dy});
            }

            var currentRow:int = -1; //1st loop will increase it to 0.
            var currentColumn:int;
            for (var i:int = 0; i < remainingDocumentsArrayCollection.length; i++) {
                currentColumn++;
                if ((i % rowLength) == 0) {
                    currentRow++;
                    currentColumn = 0;
                }
                var doc:UIComponent = remainingDocumentsArrayCollection[i] as UIComponent;
                TweensyZero.to(doc, {x: int(currentColumn * remainingColumnWidth + remainingLeft), y: int(currentRow * remainingRowHeight + remainingTop)});
                doc.width = remainingColumnWidth;
                doc.height = remainingRowHeight;
            }
        }

        public function arrangeUnDocked():void {
			ShinyHeaven.logger.info("MDI.arrangeUnDocked");
            addEventListener(Event.ENTER_FRAME, recalculateLayout);
        }
			
		public function recalculateLayout(e:Event = null):void {
			ShinyHeaven.logger.info("MDI.recalculateLayout");
			removeEventListener(Event.ENTER_FRAME, recalculateLayout);
			numberOfRows = remainingDocumentsArrayCollection.length / remainingWidth * remainingBottom;
		}

        protected function MDI_resizeHandler(event:Event):void {
			arrangeUnDocked();
        }

        protected function bringToFront(a:DocumentHolder):void {
			SubscriptionManager.ignoreRemovalFromStage = true;
			setElementIndex(a, numElements - 1); //this fires remove event (because it adds and removes it), that is why we surround it.
			SubscriptionManager.ignoreRemovalFromStage = false;
        }
		
        protected function documentMouseDown(event:MouseEvent):void {
            if (draggedDocument) {
                return; //if the drag ended outside browser, etc..
            }

            if (toMDILocal(0, event.stageY).y > 30 + event.currentTarget.y) {
                return;
            }

            draggedDocument = event.currentTarget as DocumentHolder;

            dummy = new DocumentHolder();
            dummy.x = draggedDocument.x
            dummy.y = draggedDocument.y;
            dummy.dockedDirection = draggedDocument.dockedDirection;

            indexBeforeDrag = remainingDocumentsArrayCollection.getItemIndex(draggedDocument)
            if (indexBeforeDrag != -1) {
                remainingDocumentsArrayCollection.removeItemAt(indexBeforeDrag);
            } else if (dockedDocumentsArrayCollection.contains(draggedDocument)) {
                dockedDocumentsArrayCollection.removeItemAt(dockedDocumentsArrayCollection.getItemIndex(draggedDocument));
            }

            //draggedDocument.dockedDirection = NaN;

            addElement(marker);
            bringToFront(draggedDocument);
            draggedDocument.startDrag();
            addEventListener(MouseEvent.MOUSE_UP, draggedDocumentMouseUp);
            draggedDocument.addEventListener(MouseEvent.MOUSE_MOVE, draggedDocumentMove);
            draggedDocumentMove(event);
        }

        protected function isNear(a:int, b:int, radius:int):Boolean {
            if (a < b + radius && a > b - radius) {
                return true;
            }
            return false;
        }

        protected function getDraggedSide(argX:Number, argY:Number):int {
		   
			if (isNear(argX, remainingLeft, 10)) {
                return LEFT;
            }
            if (isNear(argX, remainingRight, 10)) {
                return RIGHT;
            }
            if (isNear(argY, remainingTop, 10)) {
                return TOP;
            }
            if (isNear(argY, remainingBottom, 10)) {
                return BOTTOM;
            }
			
            return NaN;
        }

        private function setMarkerToPosition(argX:Number, argY:Number):void {
            switch (getDraggedSide(argX, argY)) {
                case LEFT:
                    markerTo(remainingLeft, remainingTop, 0, remainingHeigth);
                    break;
                case RIGHT:
                    markerTo(remainingRight, remainingTop, 0, remainingHeigth);
                    break;
                case TOP:
                    markerTo(remainingLeft, remainingTop, remainingWidth, 0);
                    break;
                case BOTTOM:
                    markerTo(remainingLeft, remainingBottom, remainingWidth, 0);
                    break;
                default:
                    var d:DocumentHolder = getClosestPanel(draggedDocument.x, draggedDocument.y);
                    markerTo(d.x, d.y, 0, d.height);
            }
        }

        protected function toMDILocal(x:Number, y:Number):Point {
            return globalToLocal(new Point(x, y));
        }

        protected function draggedDocumentMove(event:MouseEvent):void {
            setMarkerToPosition(toMDILocal(event.stageX, event.stageY).x, toMDILocal(event.stageX, event.stageY).y);
        }

        protected function getClosestPanel(argX:Number, argY:Number, useDummy:Boolean = true):DocumentHolder {
            var min:Number = Number.MAX_VALUE;
            var closest:DocumentHolder;
            for each (var d:DocumentHolder in dockedDocumentsArrayCollection) {
                setIfCloser(d);
            }
            for each (d in remainingDocumentsArrayCollection) {
                setIfCloser(d);
            }

            if (useDummy) {
                setIfCloser(dummy)
            }

            function setIfCloser(a:DocumentHolder):void {
                var d:int = (a.x - argX) * (a.x - argX) + (a.y - argY) * (a.y - argY)
                if (d < min) {
                    min = d;
                    closest = a;
                }
            }

            return closest;
        }

        protected function draggedDocumentMouseUp(event:MouseEvent):void {
            if (draggedDocument == null) {
                return;
            }
			
            draggedDocument.stopDrag();
            draggedDocument.removeEventListener(MouseEvent.MOUSE_MOVE, draggedDocumentMove);
            removeEventListener(MouseEvent.MOUSE_MOVE, draggedDocumentMouseUp);

            draggedDocument.dockedDirection = getDraggedSide(toMDILocal(event.stageX, event.stageY).x, toMDILocal(event.stageX, event.stageY).y);
            if (draggedDocument.dockedDirection > 0) {
                dockedDocumentsArrayCollection.addItem(draggedDocument);
            } else {
                var closestPanel:DocumentHolder = getClosestPanel(draggedDocument.x, draggedDocument.y);

                var dummyPlus:int = 0;

                if (closestPanel == dummy) {
                    dummyPlus++;
                }

                if (dockedDocumentsArrayCollection.contains(closestPanel)) {
                    var index:int = dockedDocumentsArrayCollection.getItemIndex(closestPanel);
                    dockedDocumentsArrayCollection.addItemAt(draggedDocument, index + dummyPlus);
                    draggedDocument.dockedDirection = closestPanel.dockedDirection;
                } else if (remainingDocumentsArrayCollection.contains(closestPanel)) {
                    index = remainingDocumentsArrayCollection.getItemIndex(closestPanel);
                    remainingDocumentsArrayCollection.addItemAt(draggedDocument, index);
                } else {
                    if (indexBeforeDrag < 0) {
                        indexBeforeDrag = 0;
                    }
                    remainingDocumentsArrayCollection.addItemAt(draggedDocument, indexBeforeDrag);
                }
            }

            if (containsElement(marker)) {
                removeElement(marker);
            }
            arrangeUnDocked();
            draggedDocument = null;
            dummy = null;
        }

        /**sets marker parameters to arg parameters*/
        private function markerTo(argX:int = 0, argY:int = 0, argWidth:int = 0, argHeigth:int = 0):void {
            marker.x = argX;
            marker.y = argY;
            marker.width = argWidth;
            marker.height = argHeigth;
        }

        protected function onAddedToStage(event:Event):void {
            callLater(arrangeUnDocked); //because widths are not calculated yet
        }
			
			
			
			
		]]>
	</fx:Script>
</s:Group>
