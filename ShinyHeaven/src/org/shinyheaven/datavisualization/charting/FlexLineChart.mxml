<?xml version="1.0" encoding="utf-8"?>
<mx:LineChart xmlns:fx="http://ns.adobe.com/mxml/2009" 
			  xmlns:s="library://ns.adobe.com/flex/spark" 
			  xmlns:mx="library://ns.adobe.com/flex/mx"
			  xmlns:parsley="http://www.spicefactory.org/parsley" 
			  xmlns:vo="org.shinyheaven.datavisualization.charting.vo.*"
			  implements="org.shinyheaven.service.IInstrumentWatcher">
	
	<fx:Declarations>
		<parsley:Configure />
		<mx:SolidColorStroke id = "s3" color="green" weight="1"/>
		<vo:DataRange id="rangeToRender" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.CollectionEvent;
			
			import org.shinyheaven.datavisualization.charting.calculators.DataRangeCalculator;
			import org.shinyheaven.service.Instrument;
			
			[Bindable]
			public var logic:DataRangeCalculator = new DataRangeCalculator();
			
			private var subscribed:String;
			
			public function subscribeToInstrument(id:String):void {
				if(subscribed != null) {
					unsubscribeFromInstrument();
				}
				subscribed = id;
				var inst:Instrument = FlexGlobals.topLevelApplication.instrumentManager.addNewInstrument(id, this)
				BindingUtils.bindProperty(this, "dataProvider", inst.chartDataProvider, "data");
				
				addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);
			}
			
			protected function onRemovedFromStage(event:Event):void {
				unsubscribeFromInstrument();
				removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);
			}
			
			public function unsubscribeFromInstrument():void {
				FlexGlobals.topLevelApplication.instrumentManager.unsubscribe(subscribed, this);
			}
			
			
			override public function set dataProvider(value:Object):void
			{
				if (super.dataProvider !== null && value !== null)
				{
					// data provier swap
					super.dataProvider.removeEventListener(CollectionEvent.COLLECTION_CHANGE, handleDataChanged);
					super.dataProvider = value as ArrayCollection;
					super.dataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, handleDataChanged);
				}
				else if (value !== null)
				{
					// dataprovider init
					super.dataProvider = value as ArrayCollection;
					super.dataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, handleDataChanged);
				}
				else
				{
					// nulling dataprovider
					
					super.dataProvider.removeEventListener(CollectionEvent.COLLECTION_CHANGE, handleDataChanged);
					super.dataProvider = value as ArrayCollection;
				}
			}

			protected function handleDataChanged(event:CollectionEvent):void
			{
				rangeToRender = new DataRangeCalculator().getDataRange((dataProvider as ArrayCollection).toArray());
			}
			
		]]>
	</fx:Script>
	
	<mx:horizontalAxis>
		<mx:DateTimeAxis id="horAxis" />
	</mx:horizontalAxis>
	
	<mx:verticalAxis>
		<mx:LinearAxis id="vertAxis" maximum="{rangeToRender.maxVal}" minimum="{rangeToRender.minVal}" />
	</mx:verticalAxis>
	
	<mx:seriesFilters>
	</mx:seriesFilters>
		
	<mx:series>
		<mx:LineSeries yField="value" form="curve" displayName="value" lineStroke="{s3}" />
	</mx:series>
	
</mx:LineChart>
